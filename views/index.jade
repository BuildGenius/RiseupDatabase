extends layout

block content 
  div.container-fluid
    div.row.mt-3
      div.col-3
        div.d-grid.gap-2
          label.form-label Search table
          input#find-button(type="text", name="find-button", placeholder="Table name").form-control
          hr
          each table in Alltable 
            button.btn.btn-light.btn-block(data-table=`${table.TABLE_NAME}`, data-action='link')=table.TABLE_NAME
      div.col-9.dataTable
        div.admin-tools.registed-user
          h3 new user request
          table.table
            thead.table-warning
              tr
                th #
                th Line id
                th Employee id
                th Full name
                th Department 
                th Role 
                th Team
                th Register time
                th Approve
            tbody.table-striped.table-hover
        div.temp-server
          h3 available disk space
          h4 Temp server
          div.temp-srv.progress(style="height: 20px;")
            div.temp-srv.progress-bar.progress-bar-striped.bg-success(role="progressbar", style="width: 25%;", aria-valuenow="25", aria-valuemin="0", aria-valuemax="100") 25%
            div.temp-srv.progress-bar.bg-light.text-dark(role="progressbar", style="width: 25%;", aria-valuenow="25", aria-valuemin="0", aria-valuemax="100") 25%
          p.text-muted.text-end.temp-srv.total-diskspace total disk spaces 189 Gb free space available for 10 years
          hr
          h4 Lovely Cat server
          div.luvly-cat-srv.progress(style="height: 20px;")
            div.luvly-cat-srv.progress-bar.progress-bar-striped.bg-success(role="progressbar", style="width: 25%;", aria-valuenow="25", aria-valuemin="0", aria-valuemax="100") 25%
            div.luvly-cat-srv.progress-bar.bg-light.text-dark(role="progressbar", style="width: 25%;", aria-valuenow="25", aria-valuemin="0", aria-valuemax="100") 25%
          p.text-muted.text-end.luvly-cat-srv.total-diskspace total disk spaces 189 Gb free space available for 10 years
  script.
    // Example POST method implementation:
    async function postData(url = '', data = {}) {
      // Default options are marked with *
      const response = await fetch(url, {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, *cors, same-origin
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        credentials: 'same-origin', // include, *same-origin, omit
        headers: {
          'Content-Type': 'application/json'
          // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: 'follow', // manual, *follow, error
        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: JSON.stringify(data) // body data type must match "Content-Type" header
      });
      return response.json(); // parses JSON response into native JavaScript objects
    }

    async function getAuth() {
      let auth = await postData('/users/getAuth');
      
      if (!auth.status) {
        window.location.replace(auth.sendto);
      }
    }

    function tricker_filter_panel () {
      setTimeout($(document).ready(function () {
        $('table>thead>tr>th').click(function () {
          var typeOfColumn = $(this).data('type');
          postData('./getFilter', { 'type': typeOfColumn });
        });
      }), 3000)
    }

    $(document).ready(async function () {
      $('div.registed-user').ready(async function () {
        let html = "";
        let data = await postData('/users/getRegistedUser', {});
        
        if (data.length == 0) {
          $('div.registed-user').addClass('d-none');
        }
        for (let i = 0 ;i < data.length;i++) {
          let d = new Date(data[i].CreateAt);
          let strTime = `${('0' + d.getDate()).slice(-2)}/${('0' + (d.getMonth() + 1)).split(-2)}/${d.getFullYear()} ${('0' + d.getHours()).slice(-2)}:${('0' + d.getMinutes()).slice(-2)}:${('0' + d.getSeconds()).slice(-2)}`;
          
          html += `<tr>
            <td>${(i + 1)}</td>
            <td>${data[i].LINEID}</td>
            <td></td>
            <td>${data[i].fullname}</td>
            <td>${data[i].department}</td>
            <td>${data[i].position}</td>
            <td>${data[i].team}</td>
            <td>${strTime}</td>
            <td>
              <div class="btn-group" role="group">
              <button type="button" class="btn btn-success" role="approve" data-user="${data[i].ID}"><i class="fa-solid fa-check"></i></button>
              <button type="button" class="btn btn-danger" role="block" data-user="${data[i].ID}"><i class="fa-solid fa-xmark"></i></button>
            </td>
          </tr>`;
        }

        $('table tbody').after(html);
        WaitForButtonClick();
      });
      $('div.temp-server').ready(async function () {
        let data = await postData('/availablediskspcs/temp_server', {"require-unit": 'Gigabytes'});
        let usage = data.total - data.available;
        let percent_use = ((usage / data.total) * 100).toFixed(2);
        let percent_ava = ((data.available / data.total) * 100).toFixed(2);
        
        $('div.temp-srv.progress-bar.bg-success').css('width', `${percent_use}%`).attr('aria-valuenow', usage).text(usage + ` Gb(${percent_use}%)`);
        $('div.temp-srv.progress-bar:not(.bg-success)').css('width', `${percent_ava}%`).attr('aria-valuenow', data.available).text(data.available + ` Gb(${percent_ava}%)`);
        $('p.temp-srv.total-diskspace').text(`total disk spaces ${data.total} Gb and data explanded ${data.avgIncrementPerDay} Mb per day. free space available for ${data.availableDay}`);
      })
      $('div.luvly-cat-srv').ready(async function () {
        let data = await postData('/availablediskspcs/lovelycat', {"require-unit": 'Gigabytes'});
        let usage = data.total - data.available;
        let percent_use = ((usage / data.total) * 100).toFixed(2);
        let percent_ava = ((data.available / data.total) * 100).toFixed(2);
        
        $('div.luvly-cat-srv.progress-bar.bg-success').css('width', `${percent_use}%`).attr('aria-valuenow', usage).text((usage).toFixed(2) + ` Gb(${percent_use}%)`);
        $('div.luvly-cat-srv.progress-bar:not(.bg-success)').css('width', `${percent_ava}%`).attr('aria-valuenow', data.available).text(data.available + ` Gb(${percent_ava}%)`);
        $('p.luvly-cat-srv.total-diskspace').text(`total disk spaces ${data.total} Gb and data explanded ${data.avgIncrementPerDay} Mb per day. free space available for ${data.availableDay}`);
      })
      $('input[type=text]#find-button').keyup(function () {
        let btnes = $('button.btn-block');

          for (let i = 0; i < btnes.length;i++) {
            let name = $(btnes[i]).attr('data-table').toUpperCase();
            let regex = new RegExp($(this).val().toUpperCase(), 'gm');

            if (regex.exec(name) == null) {
              $(btnes[i]).addClass('d-none');
            } else {
              $(btnes[i]).removeClass('d-none');
            }
          }
      });
      $('button[data-action=link]').click(async function () {
        let selector = $(this).data('table');
        let protocal = window.location.protocol;
        let uri = window.location.hostname;
        if (protocal == 'http:') {
          uri += ':3000'
        }
        let path = window.location.pathname;

        if (path == '/') {
          window.location.replace(`${protocal}//${uri}/connection/tempserver/${selector}`);
        } else {
          window.location.replace(`${protocal}//${uri}${path}/${selector}`);
        }
      });

      function WaitForButtonClick() {
        $('button[role="approve"]').click(async function () {
          let userid = $(this).data('user');
          let data = await postData('/users/update', {data: userid, status: true});
          
          if (data.status == 'completed') {
            window.location.reload();
          }
        });

        $('button[role="block"]').click(async function () {
          let userid = $(this).data('user');
          let data = await postData('/users/update', {data: userid, status: false});
          
          if (data.status == 'completed') {
            window.location.reload();
          }
        });
      }
    });